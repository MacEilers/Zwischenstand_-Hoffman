/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author tjorven
 */
import javax.swing.JOptionPane;

public class Ein_Ausgabe {
   
    public static void main(String[] args) {
    
    String text = JOptionPane.showInputDialog("Enter your text");
    int[][] myNumbers = new int [text.length()][text.length()];
    text = text.toLowerCase();
    System.out.println("Orginal Text:"+text);
    
    text_letter_num_cout(text, myNumbers);// Statistik array[0=buchstabe ; 1= anzahl,][für alle vorkomenden Buchstaben]
    
    Q<Buchstabe> q = new Q<Buchstabe>(); 
    
    int isLehr = 0;
    while (myNumbers[0][isLehr] !=0 || myNumbers[1][isLehr] !=0) {//Nur wenn es inhalt hat 
        char Buchstabe = (char) myNumbers[0][isLehr];
        String Buchstabe_S = Buchstabe+"";// Ascii wird in String umgewandelt 
            q.enqueue  ( new Buchstabe(myNumbers[0][isLehr], Buchstabe_S,myNumbers[1][isLehr]));//fügt alle element als Buchstabe in Q hinzu
            //                          Ascci               Char        Anzahl
    isLehr++;
    }
    
    Q<Buchstabe> h = new Q<Buchstabe>(); 
    
    Buchstabe Wurzel = Protukol(q);
    
    String[][] Tabelle = new String [isLehr+1][isLehr+1];
      
    Q<Buchstabe> list = new Q<Buchstabe>();
    
    auslesen(Wurzel,  list);
    
    
    
    int element =0;//
    Buchstabe akt;
    while(!list.isEmpty()){//Wird in Array übertragen
        akt = list.front();
        list.dequeue();
        
        Tabelle[0][element] = akt.Buchstabe_String ;
        Tabelle[1][element] = akt.getBin() ;
        //gibt die codierung wieder
        //System.out.println(Tabelle[0][element]);
        //System.out.println(Tabelle[1][element]);
        element++;      

       }
    
    
    
    // Buchstabe in Binercode
    String text_to_bin = text_to_bin(text, Tabelle );
    System.out.println("Bin: "+text_to_bin);
    String bin_to_text = bin_to_text(text_to_bin,Tabelle,element);
    
    System.out.println("Zurückgewandelt : "+bin_to_text);
    
   for (int i = 0; i < text.length(); i++) {//
            if (bin_to_text.charAt(i)==text.charAt(i)){
        
        
            }
            else{ 
                System.out.println(":(");
            }
        }
    
    
    
    
        
        
       
    
    
    
    
    
    //JOptionPane.showMessageDialog(null,text);Bytcode sowie Buchstabe = 01001
    
    }
    static void text_letter_num_cout(String text,int myNumbers[][]){
            for(int i =0; i<text.length(); i++){  // Fült mit 0
            myNumbers[0][i]=0;
            myNumbers[1][i]=0;
    }
    
    
    for (int j =0; j <text.length();j++){//  Für jeden Buchstaben im Text
       char helper =  text.charAt(j);
       int ascii = (int) helper ; // Ascii wert 
       for(int i=0; i < text.length() ;i++){ // Wird geschaut ob 
           if (myNumbers[0][i]== 0){ // die nächste zelle frei ist 
               myNumbers[0][i]= ascii;
               myNumbers[1][i]= 1;
               
               break;
           }
           else if (myNumbers[0][i] == ascii){// oder ob es den selben buchstaben schon gibt
               myNumbers[1][i]= myNumbers[1][i] + 1;// erhöt die anzahl des Buchstaben
               break;
           }// Geht zur nächsten Zelle
       }
    }
    }
    static Buchstabe Protukol (Q q){
        Buchstabe eins = finde_kleine(q);
        //System.out.println(eins.Anzahl+" "+eins.Buchstabe_String);
        
        Buchstabe zwei = finde_kleine(q);
        //System.out.println(zwei.Anzahl+" "+zwei.Buchstabe_String);
        int number = eins.Anzahl + zwei.Anzahl;
        String name = eins.Buchstabe_String+" "+zwei.Buchstabe_String;
        Buchstabe zusammengefast = new Buchstabe(0,name,number);// Ist Knoten also Ascci 0
        zusammengefast.setLinksBuchstabe(eins);//
        zusammengefast.setRechtsBuchstabe(zwei);//Zeiger auf vorgänger
        //System.out.println(zusammengefast.Anzahl+" "+zusammengefast.Buchstabe_String);
        //System.out.println(zusammengefast.getLinksBuchstabe().Buchstabe_String+" "+zusammengefast.getRechtsBuchstabe().Buchstabe_String);
        //System.out.println(zusammengefast.getLinksBuchstabe().Anzahl+" "+zusammengefast.getRechtsBuchstabe().Anzahl);
        
        
        q.enqueue(zusammengefast);// Wird wieder hinzugefügt 
        
        
        
        
    Buchstabe helping = (Buchstabe) q.front();
    q.dequeue();   // Ein element wirt entnommen
    if(q.isEmpty())  {// Ist es jetzt leer, hatte es nur noch 1 element 
        //System.out.println("Fertig");
        return helping;// Gitb die Wurzel zurück
    }
    else{
        //System.out.println("Wiederhollw");
        
        q.enqueue(helping);//Wird wieder hinzugefügt
        // Wiederholt solange es mindestends zwei element in der q gibt 
        return Protukol(q) ;// wie kann ich das umgehen
        
        
        // ist das notwendig ??
        
       
    }
    }
    
    static Buchstabe finde_kleine(Q q){// Enfehrnt das kleinste element aus der q und returnt es
        Q<Buchstabe> zwei = new Q<Buchstabe>();
        
        Buchstabe klienstes = (Buchstabe) q.front();
        q.dequeue();
        Buchstabe vergleich;
        
        while (!q.isEmpty()){
            vergleich = (Buchstabe)q.front();
            q.dequeue();
            
            if ( klienstes.Anzahl < vergleich.Anzahl){
                zwei.enqueue(vergleich);
            }
            else {
                zwei.enqueue(klienstes);
                klienstes = vergleich;
            }
        }
         while (!zwei.isEmpty()){
         q.enqueue(zwei.front());
         zwei.dequeue();
        }
        
        
        return klienstes;
    }
    

    static void auslesen(Buchstabe w,Q list){
    if (w.Buchstabe_Ascii == 0){// Null wenn es ein Knoten Punkt ist wird 0 gesetzt beim erstellen eines Buchstabens als zusammengefasst
        //System.out.println("Ist Knote");
        //System.out.println(w.Buchstabe_String);
        //System.out.println(w.getBin());
        Buchstabe links = w.getLinksBuchstabe();
        //System.out.println("geht L");
        Buchstabe rechts =  w.getRechtsBuchstabe();
        //System.out.println("geht R");
        links.setBin(w.getBin()+"0");
        rechts.setBin(w.getBin()+"1");
        auslesen(links,  list);
        auslesen(rechts,  list);
    }
        else{
        //System.out.println("Blat");
        //--System.out.println(w.Buchstabe_String+" "+w.getBin());
        list.enqueue(w);
        return ;


    }
    }
    static String text_to_bin(String text,  String Tabelle [][]){
        String text_bin="";
         for (int i = 0; i < text.length(); i++) {
        char help = text.charAt(i);
        String zu_codireren =help+"";
        
        for (int j = 0; j < Tabelle.length; j++) {
            String position = Tabelle[0][j];
            
        if(zu_codireren.equals(position)){
            //System.out.println("gleich");
            String entsprechender_bin = Tabelle[1][j];
            //System.out.println(entsprechender_bin);
            text_bin = text_bin.concat(entsprechender_bin);
            
            break;
        }
            
        }
    }
         return text_bin;
    }
    
    static String bin_to_text(String text_bin,  String Tabelle [][], int ele){
        
        String text_n="";
        String helper="";
        for (int i = 0; i < text_bin.length(); i++) {
            helper = helper+text_bin.charAt(i);
           
            for (int j = 0; j < ele; j++) {//Für alle in der Tabelle (wird geschaut ob es einen zugehöriegen buchstaben gibt)
                String tab = Tabelle[1][j];
                
                if(tab.equals(helper)){
                    text_n = text_n + Tabelle[0][j];
                    helper ="";
                    break;
                }
            }
                    
        }
        
        return text_n;
    }
    
}
